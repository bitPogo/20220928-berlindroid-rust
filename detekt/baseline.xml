<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyKtFile:settings.gradle.kts$.settings.gradle.kts</ID>
    <ID>EqualsWithHashCodeExist:BigUInteger.kt$BigUInteger : BigUInteger</ID>
    <ID>MagicNumber:BigUInteger.kt$BigUInteger$10</ID>
    <ID>MagicNumber:BigUIntegerFactory.kt$BigUIntegerFactory$10</ID>
    <ID>MagicNumber:Dangerfile.df.kts$1000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$20</ID>
    <ID>MagicNumber:Dangerfile.df.kts$2000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$500</ID>
    <ID>MagicNumber:settings.gradle.kts$30</ID>
    <ID>MaxLineLength:Dangerfile.df.kts$val</ID>
    <ID>MaxLineLength:Dependency.kt$Dependency.AntiBytes.Test.AndroidTest$const val annotations = "tech.antibytes.test-utils-kmp:test-utils-annotations-android:${Version.Antibytes.test}"</ID>
    <ID>MaxLineLength:Dependency.kt$Dependency.AntiBytes.Test.AndroidTest$const val coroutine = "tech.antibytes.test-utils-kmp:test-utils-coroutine-android:${Version.Antibytes.test}"</ID>
    <ID>MaxLineLength:Dependency.kt$Dependency.AntiBytes.Test.JsTest$const val annotations = "tech.antibytes.test-utils-kmp:test-utils-annotations-js:${Version.Antibytes.test}"</ID>
    <ID>MaxLineLength:Dependency.kt$Dependency.AntiBytes.Test.JvmTest$const val annotations = "tech.antibytes.test-utils-kmp:test-utils-annotations-jvm:${Version.Antibytes.test}"</ID>
    <ID>MaxLineLength:GradlePlugin.kt$GradlePlugin$const val runtimeConfig = "tech.antibytes.gradle-plugins:antibytes-runtime-configuration:${Version.Gradle.antibytes}"</ID>
    <ID>MaxLineLength:build.gradle.kts$config = files("$projectDir/detekt/config.yml")</ID>
    <ID>TooGenericExceptionThrown:BigUInteger.kt$BigUInteger$throw RuntimeException(NO_MULTIPLICATIVE_INVERSE)</ID>
    <ID>TooManyFunctions:BigUIntArithmetic.kt$BigUIntArithmetic$BigUIntArithmetic</ID>
    <ID>TooManyFunctions:BigUInteger.kt$BigUInteger : BigUInteger</ID>
    <ID>TooManyFunctions:BigUIntegerContract.kt$BigUIntegerContract$BigUIntArithmetic</ID>
    <ID>TooManyFunctions:BigUIntegerContract.kt$BigUIntegerContract$BigUInteger</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidAndroidTest by getting { dependencies { implementation(Dependency.jvm.test.junit) implementation(Dependency.android.test.junit) implementation(Dependency.android.test.espressoCore) implementation(Dependency.android.test.uiAutomator) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidAndroidTest by getting { dependsOn(androidAndroidTestRelease) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidMain by getting { dependencies { implementation(Dependency.multiplatform.kotlin.android) implementation(Dependency.multiplatform.coroutines.android) implementation(LocalDependency.sqldelight.android) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidMain by getting { dependencies { implementation(Dependency.multiplatform.kotlin.android) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidTest by getting { dependencies { implementation(Dependency.multiplatform.test.jvm) implementation(Dependency.multiplatform.test.junit) implementation(Dependency.android.test.ktx) implementation(Dependency.android.test.robolectric) implementation(Dependency.android.test.junit) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidTest by getting { dependencies { implementation(Dependency.multiplatform.test.jvm) implementation(Dependency.multiplatform.test.junit) implementation(Dependency.android.test.robolectric) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidTest by getting { dependsOn(androidTestFixtures) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val commonMain by getting { dependencies { implementation(Dependency.multiplatform.kotlin.common) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val commonTest by getting { dependencies { implementation(Dependency.multiplatform.test.common) implementation(Dependency.multiplatform.test.annotations) implementation(LocalDependency.antibytes.test.kmp.core) implementation(LocalDependency.antibytes.test.kmp.annotations) implementation(LocalDependency.antibytes.test.kmp.fixture) implementation(LocalDependency.antibytes.test.kmp.kmock) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosSimulatorArm64Main by getting { dependsOn(iosMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosSimulatorArm64Test by getting { dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsMain by getting { dependencies { implementation(Dependency.multiplatform.kotlin.js) implementation(Dependency.js.nodejs) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsTest by getting { dependencies { implementation(Dependency.multiplatform.test.js) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmMain by getting { dependencies { implementation(Dependency.multiplatform.kotlin.jdk8) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmMain by getting { resources.srcDir("$buildDir/generated/rust/") dependencies { implementation(Dependency.multiplatform.kotlin.jdk8) implementation(LocalDependency.jvm.nativeBundler) implementation(LocalDependency.jvm.slf4jNop) implementation(LocalDependency.jvm.slf4jApi) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting { dependencies { dependsOn(commonTest) implementation(Dependency.multiplatform.test.jvm) implementation(Dependency.multiplatform.test.junit) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting { dependencies { implementation(Dependency.multiplatform.test.jvm) implementation(Dependency.multiplatform.test.junit) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Main by getting { dependsOn(otherMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Test by getting { dependsOn(otherTest) }</ID>
  </CurrentIssues>
</SmellBaseline>
